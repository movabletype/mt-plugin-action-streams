=head1 NAME

Net::OAuth2::AccessToken - OAuth2 bearer token

=head1 SYNOPSIS

  my $auth  = Net::OAuth2::Profile::WebServer->new(...);

  my $token = $auth->get_access_token($code, ...);
  # $token is a Net::OAuth2::AccessToken
  if($token->error)
  {   print $token->error_description;
  }

  my $response = $token->get($request);
  my $response = $token->get($header, $content);
  print $token->to_string;  # JSON

  # probably better to set new(auto_refresh), but you may do:
  $token->refresh if $token->expired;

=head1 DESCRIPTION

This object represents a received bearer token, and offers ways to use it.

A "bearer token" is an abstract proof of your existence: different
services or potentially different physical servers are able to exchange
information about your session based on this, for instance whether
someone logged-in while showing the token.

=head1 METHODS

=head2 Constructors

=over 4

=item Net::OAuth2::AccessToken-E<gt>B<new>(OPTIONS)

 -Option           --Default
  access_token       undef
  auto_refresh       <false>
  error              undef
  error_description  <value of error>
  error_uri          undef
  expires_at         undef
  expires_in         undef
  profile            <required>
  refresh_token      false
  scope              undef
  token_type         undef

=over 2

=item access_token => STRING

=item auto_refresh => BOOLEAN

Refresh the token before each use.

=item error => STRING

Set when an error has occured, the token is not valid.  This is not
numerical.

=item error_description => STRING

A humanly readible explanation on the error.  This defaults to the
string set with the C<error> option, which is not nice to read.

=item error_uri => URI

Where to find more details about the error.

=item expires_at => TIMESTAMP

Expire this token after TIMESTAMP (as produced by the time() function)

=item expires_in => SECONDS

Expire the token SECONDS after the initiation of this object.

=item profile => L<Net::OAuth2::Profile|Net::OAuth2::Profile> object

=item refresh_token => BOOLEAN

Auto-refresh the token at each use.

=item scope => URL

=item token_type => TYPE

=back

=back

=head2 Accessors

=over 4

=item $obj-E<gt>B<access_token>()

Returns the (base64 encoded version of the) access token.  The token
will get updated first, if it has expired and refresh_token is enabled,
or when L<new(auto_refresh)|Net::OAuth2::AccessToken/"Constructors"> is set.

It does not matter that the token is base64 encoded or not: it will
always need to be base64 encoded during transport.

=item $obj-E<gt>B<auto_refresh>()

=item $obj-E<gt>B<error>()

=item $obj-E<gt>B<error_description>()

=item $obj-E<gt>B<error_uri>()

=item $obj-E<gt>B<expired>([AFTER])

Returns true when the token has an expiration set and that time has
passed.  We use this token AFTER this check: to avoid the token to
timeout inbetween, we take (by default 15 seconds) margin.

=item $obj-E<gt>B<expires_at>([TIMESTAMP])

Returns the expiration timestamp of this token (true) or C<undef> (false)
when it is not set.

=item $obj-E<gt>B<expires_in>()

Returns the number of seconds left, before the token is expired.  That
may be negative.

=item $obj-E<gt>B<profile>()

=item $obj-E<gt>B<refresh_token>()

=item $obj-E<gt>B<scope>()

=item $obj-E<gt>B<token_type>()

=item $obj-E<gt>B<update_token>(TOKEN, TOKENTYPE, EXPIRES_AT)

Change the token.

=back

=head2 Action

=over 4

=item $obj-E<gt>B<delete>(URI, [HEADER, [CONTENT]])

=item $obj-E<gt>B<get>(URI, [HEADER, [CONTENT]])

=item $obj-E<gt>B<post>(URI, [HEADER, [CONTENT]])

=item $obj-E<gt>B<put>(URI, [HEADER, [CONTENT]])

=item $obj-E<gt>B<refresh>()

Refresh the token, even if it has not expired yet.  Returned is the
new access_token value.

=item $obj-E<gt>B<request>(REQUEST)

=item $obj-E<gt>B<to_string>()

Serialize this object into JSON.

=back

=head1 SEE ALSO

This module is part of Net-OAuth2 distribution version 0.50,
built on January 07, 2013. Website: F<http://perl.overmeer.net>.

=head1 COPYRIGHTS

Copyrights 2012-2013 on the perl code and the related documentation
 by [Mark Overmeer]. For other contributors see Changes.

Copyrights 2011 by Keith Grennan.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

